import { GoogleGenerativeAI } from '@google/generative-ai'

class GeminiService {
  private genAI: GoogleGenerativeAI
  private model: any

  constructor() {
    this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY as string)
    this.model = this.genAI.getGenerativeModel({ model: 'gemini-2.5-pro' })
  }

  // T·∫°o system prompt cho cosmetic consultant
  private createSystemPrompt(): string {
    return `B·∫°n l√† chuy√™n gia t∆∞ v·∫•n m·ªπ ph·∫©m chuy√™n nghi·ªáp v·ªõi ki·∫øn th·ª©c s√¢u v·ªÅ skincare v√† l√†m ƒë·∫πp.

NHI·ªÜM V·ª§:
- T∆∞ v·∫•n s·∫£n ph·∫©m m·ªπ ph·∫©m ph√π h·ª£p v·ªõi nhu c·∫ßu kh√°ch h√†ng
- Ph√¢n t√≠ch t√¨nh tr·∫°ng da v√† ƒë∆∞a ra l·ªùi khuy√™n
- Gi·∫£i th√≠ch th√†nh ph·∫ßn v√† c√¥ng d·ª•ng s·∫£n ph·∫©m
- H∆∞·ªõng d·∫´n quy tr√¨nh chƒÉm s√≥c da

NGUY√äN T·∫ÆC:
1. Lu√¥n th√¢n thi·ªán, nhi·ªát t√¨nh v√† chuy√™n nghi·ªáp
2. ƒê·∫∑t c√¢u h·ªèi ƒë·ªÉ hi·ªÉu r√µ nhu c·∫ßu kh√°ch h√†ng
3. ƒê∆∞a ra l·ªùi khuy√™n d·ª±a tr√™n ki·∫øn th·ª©c khoa h·ªçc
4. Kh√¥ng ƒë∆∞a ra l·ªùi khuy√™n y t·∫ø, n·∫øu c·∫ßn h√£y g·ª£i √Ω kh√°ch tham kh·∫£o b√°c sƒ© da li·ªÖu
5. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch (t·ªëi ƒëa 300 t·ª´)

LO·∫†I DA:
- Da kh√¥ (Dry): thi·∫øu ·∫©m, cƒÉng r√°t
- Da d·∫ßu (Oily): b√≥ng nh·ªùn, d·ªÖ m·ª•n
- Da h·ªón h·ª£p (Combination): v√πng T d·∫ßu, m√° kh√¥
- Da nh·∫°y c·∫£m (Sensitive): d·ªÖ k√≠ch ·ª©ng, ƒë·ªè
- Da th∆∞·ªùng (Normal): c√¢n b·∫±ng

V·∫§N ƒê·ªÄ DA TH∆Ø·ªúNG G·∫∂P:
- M·ª•n (Acne)
- Th√¢m n√°m (Dark spots, Hyperpigmentation)
- L√£o h√≥a (Anti-aging, Wrinkles)
- Kh√¥ da (Dehydration)
- L·ªó ch√¢n l√¥ng to (Large pores)
- Da kh√¥ng ƒë·ªÅu m√†u (Uneven skin tone)

TH√ÄNH PH·∫¶N PH·ªî BI·∫æN:
- Hyaluronic Acid: gi·ªØ ·∫©m
- Niacinamide: l√†m s√°ng, ki·ªÉm so√°t d·∫ßu
- Retinol: ch·ªëng l√£o h√≥a
- Vitamin C: l√†m s√°ng, ch·ªëng oxy h√≥a
- Salicylic Acid: tr·ªã m·ª•n
- AHA/BHA: t·∫©y t·∫ø b√†o ch·∫øt
- Centella Asiatica: l√†m d·ªãu, ph·ª•c h·ªìi

H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch t·ª± nhi√™n v√† th√¢n thi·ªán.`
  }

  // Ph√¢n t√≠ch tin nh·∫Øn v·ªõi Gemini ƒë·ªÉ hi·ªÉu s√¢u h∆°n
  async analyzeMessage(
    userMessage: string,
    chatHistory: Array<{ role: string; content: string }> = []
  ): Promise<{
    analysis: string
    skinType?: string
    concerns: string[]
    productTypes: string[]
    suggestions: string
  }> {
    try {
      const prompt = `${this.createSystemPrompt()}

L·ªäCH S·ª¨ TR√í CHUY·ªÜN:
${chatHistory.map((msg) => `${msg.role === 'user' ? 'Kh√°ch h√†ng' : 'T∆∞ v·∫•n vi√™n'}: ${msg.content}`).join('\n')}

TIN NH·∫ÆN M·ªöI: "${userMessage}"

H√£y ph√¢n t√≠ch tin nh·∫Øn v√† tr·∫£ v·ªÅ JSON v·ªõi format sau:
{
  "analysis": "Ph√¢n t√≠ch ng·∫Øn g·ªçn v·ªÅ nhu c·∫ßu kh√°ch h√†ng",
  "skinType": "lo·∫°i da n·∫øu x√°c ƒë·ªãnh ƒë∆∞·ª£c (dry/oily/combination/sensitive/normal) ho·∫∑c null",
  "concerns": ["danh s√°ch c√°c v·∫•n ƒë·ªÅ da"],
  "productTypes": ["c√°c lo·∫°i s·∫£n ph·∫©m c·∫ßn t√¨m"],
  "suggestions": "G·ª£i √Ω v√† l·ªùi khuy√™n chi ti·∫øt cho kh√°ch h√†ng"
}`

      const result = await this.model.generateContent(prompt)
      const response = await result.response
      const text = response.text()

      // Parse JSON t·ª´ response
      const jsonMatch = text.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0])
      }

      // Fallback n·∫øu kh√¥ng parse ƒë∆∞·ª£c
      return {
        analysis: text,
        concerns: [],
        productTypes: [],
        suggestions: text
      }
    } catch (error) {
      console.error('Gemini analysis error:', error)
      return {
        analysis: 'ƒêang ph√¢n t√≠ch...',
        concerns: [],
        productTypes: [],
        suggestions: 'T√¥i s·∫Ω t√¨m s·∫£n ph·∫©m ph√π h·ª£p cho b·∫°n.'
      }
    }
  }

  // T·∫°o ph·∫£n h·ªìi t·ª± nhi√™n v·ªõi Gemini
  async generateResponse(
    userMessage: string,
    productRecommendations: any[],
    chatHistory: Array<{ role: string; content: string }> = []
  ): Promise<string> {
    try {
      const productsInfo = productRecommendations
        .map(
          (rec, idx) => `
${idx + 1}. ${rec.product.name} (${rec.product.brand.name})
   - Gi√°: ${Math.min(...rec.product.variants.map((v: any) => v.price)).toLocaleString()}ƒë
   - ƒê√°nh gi√°: ${rec.product.rating}/5 ‚≠ê
   - Ph√π h·ª£p v√¨: ${rec.reason.join(', ')}
   - M√¥ t·∫£: ${rec.product.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
`
        )
        .join('\n')

      const prompt = `${this.createSystemPrompt()}

L·ªäCH S·ª¨ TR√í CHUY·ªÜN:
${chatHistory.map((msg) => `${msg.role === 'user' ? 'Kh√°ch h√†ng' : 'T∆∞ v·∫•n vi√™n'}: ${msg.content}`).join('\n')}

KH√ÅCH H√ÄNG V·ª™A H·ªéI: "${userMessage}"

C√ÅC S·∫¢N PH·∫®M PH√ô H·ª¢P T√åM ƒê∆Ø·ª¢C:
${productsInfo || 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p'}

H√ÉY:
1. Tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng m·ªôt c√°ch t·ª± nhi√™n v√† th√¢n thi·ªán
2. Gi·ªõi thi·ªáu c√°c s·∫£n ph·∫©m ph√π h·ª£p (n·∫øu c√≥)
3. Gi·∫£i th√≠ch t·∫°i sao s·∫£n ph·∫©m ph√π h·ª£p
4. ƒê∆∞a ra l·ªùi khuy√™n s·ª≠ d·ª•ng (n·∫øu c·∫ßn)
5. H·ªèi th√™m ƒë·ªÉ t∆∞ v·∫•n t·ªët h∆°n (n·∫øu c·∫ßn)

Tr·∫£ l·ªùi ng·∫Øn g·ªçn (200-300 t·ª´), d·ªÖ hi·ªÉu, gi·ªçng ƒëi·ªáu th√¢n thi·ªán nh∆∞ ƒëang chat v·ªõi b·∫°n b√®.
S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ t·∫°o c·∫£m gi√°c g·∫ßn g≈©i üòä`

      const result = await this.model.generateContent(prompt)
      const response = await result.response
      return response.text()
    } catch (error) {
      console.error('Gemini response error:', error)
      return this.createFallbackResponse(productRecommendations)
    }
  }

  // Ph·∫£n h·ªìi d·ª± ph√≤ng khi Gemini l·ªói
  private createFallbackResponse(recommendations: any[]): string {
    if (recommendations.length === 0) {
      return 'Xin l·ªói, hi·ªán t·∫°i t√¥i ch∆∞a t√¨m ƒë∆∞·ª£c s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ m√¥ t·∫£ chi ti·∫øt h∆°n v·ªÅ lo·∫°i da v√† v·∫•n ƒë·ªÅ b·∫°n ƒëang g·∫∑p ph·∫£i kh√¥ng? üòä'
    }

    let message = `T√¥i ƒë√£ t√¨m ƒë∆∞·ª£c ${recommendations.length} s·∫£n ph·∫©m ph√π h·ª£p v·ªõi b·∫°n:\n\n`

    recommendations.forEach((rec, idx) => {
      const minPrice = Math.min(...rec.product.variants.map((v: any) => v.price))
      message += `${idx + 1}. **${rec.product.name}** (${rec.product.brand.name})\n`
      message += `   üí∞ Gi√°: ${minPrice.toLocaleString()}ƒë\n`
      message += `   ‚≠ê ƒê√°nh gi√°: ${rec.product.rating}/5\n`
      message += `   ‚ú® ${rec.reason[0]}\n\n`
    })

    message += 'B·∫°n mu·ªën bi·∫øt th√™m chi ti·∫øt v·ªÅ s·∫£n ph·∫©m n√†o kh√¥ng? üòä'
    return message
  }

  // Gi·∫£i th√≠ch th√†nh ph·∫ßn s·∫£n ph·∫©m
  async explainIngredients(ingredients: string): Promise<string> {
    try {
      const prompt = `${this.createSystemPrompt()}

H√£y gi·∫£i th√≠ch ng·∫Øn g·ªçn v√† d·ªÖ hi·ªÉu v·ªÅ c√°c th√†nh ph·∫ßn sau trong s·∫£n ph·∫©m m·ªπ ph·∫©m:

${ingredients}

V·ªõi m·ªói th√†nh ph·∫ßn quan tr·ªçng, h√£y n√≥i:
- C√¥ng d·ª•ng ch√≠nh
- Ph√π h·ª£p v·ªõi lo·∫°i da n√†o
- L∆∞u √Ω khi s·ª≠ d·ª•ng (n·∫øu c√≥)

Tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu (t·ªëi ƒëa 200 t·ª´).`

      const result = await this.model.generateContent(prompt)
      const response = await result.response
      return response.text()
    } catch (error) {
      console.error('Gemini ingredients error:', error)
      return 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ ph√¢n t√≠ch th√†nh ph·∫ßn l√∫c n√†y.'
    }
  }

  // T·∫°o routine chƒÉm s√≥c da
  async createSkincareRoutine(skinType: string, concerns: string[], availableProducts: any[]): Promise<string> {
    try {
      const productsInfo = availableProducts
        .map((p) => `- ${p.name} (${p.category?.name || 'Unknown category'})`)
        .join('\n')

      const prompt = `${this.createSystemPrompt()}

H√£y t·∫°o quy tr√¨nh chƒÉm s√≥c da (skincare routine) cho:
- Lo·∫°i da: ${skinType}
- V·∫•n ƒë·ªÅ da: ${concerns.join(', ')}

C√ÅC S·∫¢N PH·∫®M C√ì S·∫¥N:
${productsInfo}

H√£y ƒë·ªÅ xu·∫•t quy tr√¨nh:
1. Bu·ªïi s√°ng (Morning routine)
2. Bu·ªïi t·ªëi (Evening routine)

V·ªõi m·ªói b∆∞·ªõc:
- T√™n b∆∞·ªõc
- S·∫£n ph·∫©m g·ª£i √Ω (t·ª´ danh s√°ch tr√™n)
- C√°ch d√πng ng·∫Øn g·ªçn

Tr·∫£ l·ªùi d·ªÖ hi·ªÉu, th·ª±c t·∫ø (t·ªëi ƒëa 300 t·ª´).`

      const result = await this.model.generateContent(prompt)
      const response = await result.response
      return response.text()
    } catch (error) {
      console.error('Gemini routine error:', error)
      return 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o quy tr√¨nh chƒÉm s√≥c da l√∫c n√†y.'
    }
  }

  // So s√°nh s·∫£n ph·∫©m
  async compareProducts(products: any[]): Promise<string> {
    try {
      const productsInfo = products
        .map(
          (p, idx) => `
S·∫¢N PH·∫®M ${idx + 1}: ${p.name} (${p.brand?.name})
- Gi√°: ${Math.min(...p.variants.map((v: any) => v.price)).toLocaleString()}ƒë
- ƒê√°nh gi√°: ${p.rating}/5
- Th√†nh ph·∫ßn ch√≠nh: ${p.ingredients || 'Kh√¥ng c√≥ th√¥ng tin'}
- M√¥ t·∫£: ${p.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
`
        )
        .join('\n')

      const prompt = `${this.createSystemPrompt()}

H√£y so s√°nh c√°c s·∫£n ph·∫©m sau:

${productsInfo}

So s√°nh v·ªÅ:
- ∆Øu ƒëi·ªÉm c·ªßa t·ª´ng s·∫£n ph·∫©m
- Ph√π h·ª£p v·ªõi ai
- ƒê√°nh gi√° v·ªÅ gi√° c·∫£
- G·ª£i √Ω l·ª±a ch·ªçn

Tr·∫£ l·ªùi kh√°ch quan, d·ªÖ hi·ªÉu (t·ªëi ƒëa 300 t·ª´).`

      const result = await this.model.generateContent(prompt)
      const response = await result.response
      return response.text()
    } catch (error) {
      console.error('Gemini compare error:', error)
      return 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ so s√°nh s·∫£n ph·∫©m l√∫c n√†y.'
    }
  }
}

const geminiService = new GeminiService()
export default geminiService
