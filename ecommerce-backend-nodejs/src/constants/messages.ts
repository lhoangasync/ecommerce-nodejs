export const USERS_MESSAGES = {
  VALIDATION_ERROR: 'Validation error',
  NAME_IS_REQUIRED: 'Name is required',
  NAME_MUST_BE_A_STRING: 'Name must be a string',
  NAME_LENGTH_MUST_BE_FROM_1_TO_100: 'Name length must be from 1 to 100',
  EMAIL_IS_REQUIRED: 'Email is required',
  EMAIL_MUST_BE_A_STRING: 'Email must be a string',
  EMAIL_MUST_BE_A_VALID_EMAIL: 'Email must be a valid email',
  EMAIL_LENGTH_MUST_BE_FROM_5_TO_100: 'Email length must be from 5 to 100',
  EMAIL_INVALID: 'Email is invalid',
  EMAIL_OR_PASSWORD_IS_INCORRECT: 'Email or password is incorrect',
  EMAIL_ALREADY_EXISTS: 'Email already exists',
  PASSWORD_MUST_BE_A_STRING: 'Password must be a string',
  PASSWORD_IS_REQUIRED: 'Password is required',
  PASSWORD_LENGTH_MUST_BE_FROM_6_TO_50: 'Password length must be from 6 to 50',
  PASSWORD_MUST_BE_STRONG: 'Password must be strong',
  CONFIRM_PASSWORD_MUST_BE_A_STRING: 'Confirm password must be a string',
  CONFIRM_PASSWORD_IS_REQUIRED: 'Confirm password is required',
  CONFIRM_PASSWORD_LENGTH_MUST_BE_FROM_6_TO_50: 'Confirm password length must be from 6 to 50',
  CONFIRM_PASSWORD_MUST_BE_STRONG: 'Confirm password must be strong',
  CONFIRM_PASSWORD_MUST_BE_THE_SAME_AS_PASSWORD: 'Confirm password must be the same as password',
  REGISTER_SUCCESS: 'Register successfully',
  LOGIN_SUCCESS: 'Login successfully',
  LOGOUT_SUCCESS: 'Logout successfully',
  REFRESH_TOKEN_SUCCESS: 'Refresh token successfully',
  ACCESS_TOKEN_REQUIRED: 'Access token is required',
  USED_REFRESH_TOKEN_OR_NOT_EXIST: 'Used refresh token or not exist',
  REFRESH_TOKEN_IS_REQUIRED: 'Refresh token is required',
  GET_PROFILE_SUCCESS: 'Get profile successfully',
  USER_NOT_VERIFIED: 'User not verified',
  GET_ALL_USER_SUCCESS: 'Get all users successfully',
  USER_NOT_PERRMISSION: 'You do not have permission to access this resource',
  USER_NOT_FOUND: 'User not found',
  USERNAME_MUST_BE_A_STRING: 'Username is required',
  USERNAME_INVALID: 'Username is invalid',
  USERNAME_EXISTED: 'Username is existed',
  IMAGE_URL_MUST_BE_A_STRING: 'Avatar must be a string',
  IMAGE_URL_LENGTH: 'Avatar length must be from 1 to 400',
  ADDRESS_MUST_BE_STRING: ' Address must be a string',
  ADDRESS_LENGTH: 'Address length must be from 5 to 200',
  ROLE_MUST_BE_A_NUMBER: 'Role must be a number',
  VERIFY_MUST_BE_A_NUMBER: 'Verify must be a number',
  PHONE_MUST_BE_A_STRING: 'Phone number must be provided as a string',
  PHONE_MUST_CONTAIN_ONLY_DIGITS: 'Phone number must contain only digits',
  PHONE_LENGTH: 'Phone number must be between 10 and 11 digits',
  UPDATE_USER_SUCCESS: 'Update user successfully',
  DELETE_USER_SUCCESS: 'Delete user successfully',
  INVALID_USER_ID: 'Invalid user id',
  EMAIL_VERIFY_TOKEN_IS_REQUIRED: 'Email verify token is required',
  EMAIL_ALREADY_VERIFIED_BEFORE: 'Email already verified before',
  EMAIL_VERIFY_SUCCESS: 'Email verify successfully',
  FORGOT_PASSWORD_SUCCESS: 'Password reset email sent successfully',
  RESET_PASSWORD_SUCCESS: 'Password reset successfully',
  INVALID_RESET_TOKEN: 'Invalid or expired reset token'
} as const

export const BRANDS_MESSAGES = {
  NAME_IS_REQUIRED: 'Name is required',
  NAME_MUSE_BE_A_STRING: 'Name must be a string',
  NAME_LENGTH_MUST_BE_FROM_1_TO_50: 'Name length must be from 1 to 50 characters',
  COUNTRY_MUSE_BE_A_STRING: 'Country must be a string',
  COUNTRY_LENGTH_MUST_BE_FROM_1_TO_50: 'Country length must be from 1 to 50 characters',
  DESCRIPTION_MUSE_BE_A_STRING: 'Description must be a string',
  DESCRIPTION_LENGTH_MUST_BE_FROM_1_TO_500: 'Description length must be from 1 to 50 characters',
  IMAGE_URL_MUST_BE_A_STRING: 'Image must be a string',
  IMAGE_URL_LENGTH: 'Image url length must be 1 from 400',
  SLUG_INVALID: 'Slug invalid',
  SLUG_IS_EXISTED: 'Slug is existed',
  ADD_BRAND_SUCCESS: 'Add brand successfully!',
  GET_ALL_BRANDS_SUCCESS: 'Get all brands successfully',
  INVALID_BRAND_ID: 'Invalid brand id',
  BRAND_NOT_FOUND: 'Brand not found',
  DELETE_BRAND_SUCCESS: 'Delete brand successfully',
  GET_BRAND_SUCCESS: 'Get brand by id successfully',
  UPDATE_BRAND_SUCCESS: 'Update brand successfully'
} as const

export const CATEGORIES_MESSAGES = {
  INVALID_CATEGORY_ID: 'Invalid category id',
  CATEGORY_NOT_FOUND: 'Category not found',
  GET_ALL_CATEGORIES_SUCCESS: 'Get all categories successfully',
  GET_CATEGORY_SUCCESS: 'Get category by id successfully',
  NAME_IS_REQUIRED: 'Name is required',
  NAME_MUSE_BE_A_STRING: 'Name must be a string',
  NAME_LENGTH_MUST_BE_FROM_1_TO_50: 'Name length must be from 1 to 50 characters',
  DESCRIPTION_MUSE_BE_A_STRING: 'Description must be a string',
  DESCRIPTION_LENGTH_MUST_BE_FROM_1_TO_500: 'Description length must be from 1 to 50 characters',
  IMAGE_URL_MUST_BE_A_STRING: 'Image must be a string',
  IMAGE_URL_LENGTH: 'Image url length must be 1 from 400',
  SLUG_INVALID: 'Slug invalid',
  SLUG_IS_EXISTED: 'Slug is existed',
  ADD_CATEGORY_SUCCESS: 'Add category successfully',
  DELETE_CATEGORY_SUCCESS: 'Delete category successfully',
  UPDATE_BRAND_SUCCESS: 'Update brand successfully'
}

export const PRODUCTS_MESSAGES = {
  NAME_IS_REQUIRED: 'Product name is required',
  NAME_MUST_BE_A_STRING: 'Product name must be a string',
  NAME_LENGTH_MUST_BE_FROM_1_TO_100: 'Product name length must be from 1 to 100 characters',
  SLUG_INVALID: 'Product slug is invalid',
  SLUG_IS_EXISTED: 'Product slug already exists',
  DESCRIPTION_MUST_BE_A_STRING: 'Description must be a string',
  DESCRIPTION_LENGTH_MAX_1000: 'Description length must not exceed 1000 characters',
  BRAND_ID_IS_REQUIRED: 'Brand ID is required',
  BRAND_ID_INVALID: 'Invalid brand ID',
  CATEGORY_ID_IS_REQUIRED: 'Category ID is required',
  CATEGORY_ID_INVALID: 'Invalid category ID',
  IMAGES_MUST_BE_ARRAY: 'Images must be an array',
  IMAGE_URL_MUST_BE_STRING: 'Image URL must be a string',
  IMAGE_URL_LENGTH_MAX_500: 'Image URL length must not exceed 500 characters',
  HOW_TO_USE_MUST_BE_STRING: 'How to use must be a string',
  HOW_TO_USE_LENGTH_MAX_2000: 'How to use length must not exceed 2000 characters',
  TAGS_MUST_BE_ARRAY: 'Tags must be an array',
  TAG_MUST_BE_STRING: 'Each tag must be a string',
  INGREDIENTS_MUST_BE_STRING: 'Ingredients must be a string',
  INGREDIENTS_LENGTH_MAX_2000: 'Ingredients length must not exceed 2000 characters',
  SKIN_TYPE_MUST_BE_ARRAY: 'Skin type must be an array',
  SKIN_TYPE_INVALID: 'Invalid skin type. Valid types: dry, oily, combination, sensitive, normal',
  ORIGIN_MUST_BE_STRING: 'Origin must be a string',
  ORIGIN_LENGTH_MAX_100: 'Origin length must not exceed 100 characters',
  VARIANTS_REQUIRED: 'At least one variant is required',
  VARIANTS_MUST_BE_ARRAY: 'Variants must be an array',
  VARIANT_ID_REQUIRED: 'Variant ID is required',
  VARIANT_ID_MUST_BE_STRING: 'Variant ID must be a string',
  VARIANT_IDS_MUST_BE_UNIQUE: 'Variant IDs must be unique within a product',
  VARIANT_ID_ALREADY_EXISTS: 'Variant ID already exists in this product',
  VARIANT_NOT_FOUND: 'Variant not found',
  VARIANT_SHADE_COLOR_MUST_BE_STRING: 'Variant shade/color must be a string',
  VARIANT_SHADE_COLOR_LENGTH_MAX_50: 'Variant shade/color length must not exceed 50 characters',
  VARIANT_VOLUME_SIZE_MUST_BE_STRING: 'Variant volume/size must be a string',
  VARIANT_VOLUME_SIZE_LENGTH_MAX_50: 'Variant volume/size length must not exceed 50 characters',
  VARIANT_PRICE_REQUIRED: 'Variant price is required',
  VARIANT_PRICE_MUST_BE_NUMBER: 'Variant price must be a number',
  VARIANT_PRICE_MUST_BE_POSITIVE: 'Variant price must be positive',
  VARIANT_SKU_REQUIRED: 'Variant SKU is required',
  VARIANT_SKU_MUST_BE_STRING: 'Variant SKU must be a string',
  VARIANT_SKU_LENGTH_MAX_100: 'Variant SKU length must not exceed 100 characters',
  VARIANT_SKUS_MUST_BE_UNIQUE: 'Variant SKUs must be unique within a product',
  VARIANT_SKU_ALREADY_EXISTS: 'Variant SKU already exists in this product',
  VARIANT_IMAGES_MUST_BE_ARRAY: 'Variant images must be an array',
  VARIANT_IMAGE_URL_MUST_BE_STRING: 'Variant image URL must be a string',
  VARIANT_IMAGE_URL_LENGTH_MAX_500: 'Variant image URL length must not exceed 500 characters',
  VARIANT_STOCK_QUANTITY_REQUIRED: 'Variant stock quantity is required',
  VARIANT_STOCK_QUANTITY_MUST_BE_NUMBER: 'Variant stock quantity must be a number',
  VARIANT_STOCK_QUANTITY_MUST_BE_NON_NEGATIVE: 'Variant stock quantity must be non-negative',
  VARIANT_IS_AVAILABLE_REQUIRED: 'Variant availability status is required',
  VARIANT_IS_AVAILABLE_MUST_BE_BOOLEAN: 'Variant availability must be a boolean',
  VARIANT_ORIGINAL_PRICE_MUST_BE_NUMBER: 'Variant original price must be a number',
  VARIANT_ORIGINAL_PRICE_MUST_BE_POSITIVE: 'Variant original price must be positive',
  VARIANT_ORIGINAL_PRICE_MUST_BE_GREATER_THAN_PRICE:
    'Variant original price must be greater than or equal to current price',
  CANNOT_DELETE_LAST_VARIANT: 'Cannot delete the last variant. Product must have at least one variant',
  ADD_PRODUCT_SUCCESS: 'Product added successfully',
  GET_ALL_PRODUCTS_SUCCESS: 'Get all products successfully',
  GET_PRODUCT_SUCCESS: 'Get product successfully',
  UPDATE_PRODUCT_SUCCESS: 'Product updated successfully',
  DELETE_PRODUCT_SUCCESS: 'Product deleted successfully',
  ADD_VARIANT_SUCCESS: 'Variant added successfully',
  UPDATE_VARIANT_SUCCESS: 'Variant updated successfully',
  DELETE_VARIANT_SUCCESS: 'Variant deleted successfully',
  UPDATE_VARIANT_STOCK_SUCCESS: 'Variant stock updated successfully',
  INVALID_PRODUCT_ID: 'Invalid product ID',
  PRODUCT_NOT_FOUND: 'Product not found',
  BRAND_NOT_FOUND: 'Brand not found',
  CATEGORY_NOT_FOUND: 'Category not found'
} as const

export const CART_MESSAGES = {
  ADD_TO_CART_SUCCESS: 'Item added to cart successfully',
  GET_CART_SUCCESS: 'Cart retrieved successfully',
  UPDATE_CART_SUCCESS: 'Cart item updated successfully',
  REMOVE_FROM_CART_SUCCESS: 'Item removed from cart successfully',
  CLEAR_CART_SUCCESS: 'Cart cleared successfully',
  CART_EMPTY: 'Cart is empty',
  PRODUCT_NOT_IN_CART: 'Product not found in cart',
  CART_MIGRATED_SUCCESS: 'Cart migrated to database successfully'
} as const

export const PAYMENT_MESSAGES = {
  PAYMENT_CREATED_SUCCESS: 'Payment created successfully',
  PAYMENT_NOT_FOUND: 'Payment not found',
  PAYMENT_ALREADY_COMPLETED: 'Payment already completed',
  PAYMENT_EXPIRED: 'Payment has expired',
  PAYMENT_FAILED: 'Payment failed',
  PAYMENT_VERIFIED_SUCCESS: 'Payment verified successfully',
  INVALID_SIGNATURE: 'Invalid payment signature',
  REFUND_SUCCESS: 'Refund processed successfully',
  CANNOT_REFUND: 'Cannot refund this payment'
} as const

export const ORDER_MESSAGES = {
  ORDER_CREATED_SUCCESS: 'Order created successfully',
  ORDER_NOT_FOUND: 'Order not found',
  ORDER_ALREADY_CANCELLED: 'Order already cancelled',
  CANNOT_CANCEL_ORDER: 'Cannot cancel order at this stage',
  CART_EMPTY: 'Cart is empty',
  OUT_OF_STOCK: 'Product is out of stock',
  ORDER_STATUS_UPDATED: 'Order status updated successfully'
} as const

export const REVIEWS_MESSAGES = {
  // Validation messages
  INVALID_RATING: 'Rating must be between 1 and 5',
  RATING_REQUIRED: 'Rating is required',
  PRODUCT_ID_REQUIRED: 'Product ID is required',
  INVALID_PRODUCT_ID: 'Invalid product ID',
  INVALID_USER_ID: 'Invalid user ID',
  INVALID_ORDER_ID: 'Invalid order ID',
  INVALID_REVIEW_ID: 'Invalid review ID',
  COMMENT_MUST_BE_STRING: 'Comment must be a string',
  COMMENT_LENGTH: 'Comment must be between 1 and 2000 characters',
  VARIANT_ID_MUST_BE_STRING: 'Variant ID must be a string',
  IMAGES_MUST_BE_ARRAY: 'Images must be an array',
  IMAGES_MUST_BE_STRINGS: 'All image URLs must be strings',
  MAX_IMAGES: 'Maximum 5 images allowed',
  IS_VERIFIED_MUST_BE_BOOLEAN: 'is_verified_purchase must be a boolean',
  INVALID_STATUS: 'Invalid review status',
  INVALID_PAGE: 'Page must be greater than 0',
  INVALID_LIMIT: 'Limit must be between 1 and 100',
  INVALID_SORT_BY: 'sort_by must be one of: created_at, rating, helpful_count',
  INVALID_ORDER: 'order must be asc or desc',
  MESSAGE_REQUIRED: 'Message is required',
  MESSAGE_MUST_BE_STRING: 'Message must be a string',
  MESSAGE_LENGTH: 'Message must be between 1 and 1000 characters',

  // Error messages
  ALREADY_REVIEWED: 'You have already reviewed this product',
  REVIEW_NOT_FOUND: 'Review not found',
  PRODUCT_NOT_FOUND: 'Product not found',
  REVIEW_NOT_FOUND_OR_UNAUTHORIZED: 'Review not found or you are not authorized to modify it',

  // Success messages
  CREATE_REVIEW_SUCCESS: 'Review created successfully',
  UPDATE_REVIEW_SUCCESS: 'Review updated successfully',
  DELETE_REVIEW_SUCCESS: 'Review deleted successfully',
  APPROVE_REVIEW_SUCCESS: 'Review approved successfully',
  REJECT_REVIEW_SUCCESS: 'Review rejected successfully',
  MARK_HELPFUL_SUCCESS: 'Marked as helpful successfully',
  REPORT_REVIEW_SUCCESS: 'Review reported successfully',
  ADD_SELLER_RESPONSE_SUCCESS: 'Seller response added successfully',
  GET_REVIEWS_SUCCESS: 'Get reviews successfully',
  GET_REVIEW_SUCCESS: 'Get review successfully',
  GET_RATING_STATS_SUCCESS: 'Get rating statistics successfully'
} as const

export const AUTO_COUPON_MESSAGES = {
  // Validation
  NAME_IS_REQUIRED: 'Rule name is required',
  NAME_MUST_BE_STRING: 'Rule name must be a string',
  NAME_LENGTH: 'Rule name must be between 1 and 100 characters',
  TRIGGER_TYPE_INVALID: 'Trigger type must be one of: order_count, total_spent, first_order, birthday',
  REQUIRED_ORDER_COUNT_INVALID: 'Required order count must be a positive number',
  REQUIRED_TOTAL_SPENT_INVALID: 'Required total spent must be a positive number',
  CODE_PREFIX_REQUIRED: 'Coupon code prefix is required',
  CODE_PREFIX_MUST_BE_STRING: 'Code prefix must be a string',
  CODE_PREFIX_LENGTH: 'Code prefix must be between 2 and 20 characters',
  DISCOUNT_TYPE_INVALID: 'Discount type must be percentage or fixed_amount',
  DISCOUNT_VALUE_REQUIRED: 'Discount value is required',
  DISCOUNT_VALUE_INVALID: 'Discount value must be a positive number',
  VALID_DAYS_REQUIRED: 'Valid days is required',
  VALID_DAYS_INVALID: 'Valid days must be a positive number between 1 and 365',
  USAGE_LIMIT_PER_USER_REQUIRED: 'Usage limit per user is required',
  USAGE_LIMIT_PER_USER_INVALID: 'Usage limit per user must be a positive number',
  INVALID_RULE_ID: 'Invalid rule ID',

  // Success
  CREATE_RULE_SUCCESS: 'Auto coupon rule created successfully',
  GET_RULES_SUCCESS: 'Get auto coupon rules successfully',
  GET_RULE_SUCCESS: 'Get auto coupon rule successfully',
  UPDATE_RULE_SUCCESS: 'Auto coupon rule updated successfully',
  DELETE_RULE_SUCCESS: 'Auto coupon rule deleted successfully',
  COUPON_AUTO_GENERATED: 'Congratulations! You have received a new coupon',
  GET_USER_AUTO_COUPONS_SUCCESS: 'Get user auto coupons successfully',

  // Error
  RULE_NOT_FOUND: 'Auto coupon rule not found',
  RULE_NOT_ACTIVE: 'This rule is not active',
  ALREADY_REDEEMED: 'You have already received this reward',
  MAX_REDEMPTIONS_REACHED: 'This reward has reached maximum redemptions'
} as const

export const CHATBOT_MESSAGES = {
  // Validation
  MESSAGE_REQUIRED: 'Message is required',
  MESSAGE_MUST_BE_STRING: 'Message must be a string',
  MESSAGE_LENGTH: 'Message must be between 1 and 1000 characters',
  INVALID_SESSION_ID: 'Invalid session ID',
  PRODUCT_IDS_REQUIRED: 'Product IDs are required',
  PRODUCT_IDS_MUST_BE_ARRAY: 'Product IDs must be an array',
  MIN_PRODUCTS_TO_COMPARE: 'At least 2 product IDs are required to compare',
  MAX_PRODUCTS_TO_COMPARE: 'Maximum 5 products can be compared at once',
  INVALID_PRODUCT_ID: 'Invalid product ID',

  // Success
  CHAT_RESPONSE_SUCCESS: 'Chat response generated successfully',
  GET_CHAT_HISTORY_SUCCESS: 'Get chat history successfully',
  GET_CHAT_SESSION_SUCCESS: 'Get chat session successfully',
  GET_SUGGESTIONS_SUCCESS: 'Get quick suggestions successfully',
  INGREDIENTS_EXPLAINED_SUCCESS: 'Ingredients explained successfully',
  ROUTINE_CREATED_SUCCESS: 'Skincare routine created successfully',
  PRODUCTS_COMPARED_SUCCESS: 'Products compared successfully',

  // Error
  CHAT_SESSION_NOT_FOUND: 'Chat session not found',
  PRODUCT_NOT_FOUND: 'Product not found',
  NO_INGREDIENTS_INFO: 'No ingredients information available for this product',
  GEMINI_API_ERROR: 'AI service temporarily unavailable',
  CHAT_GENERATION_FAILED: 'Failed to generate chat response'
} as const
